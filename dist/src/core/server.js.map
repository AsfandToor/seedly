{"version":3,"sources":["../../../src/core/server.ts"],"sourcesContent":["import {\n  McpServer,\n  ResourceTemplate,\n} from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport { z } from 'zod';\nimport sqlite3 from 'sqlite3';\nimport { promisify } from 'util';\nexport default class SeederMCPServer {\n  private server: McpServer;\n\n  constructor() {\n    this.server = new McpServer({\n      name: 'seeder',\n      version: '1.0.0',\n    });\n  }\n  getDb = () => {\n    const db = new sqlite3.Database('database.db');\n    return {\n      all: promisify<string, any[]>(db.all.bind(db)),\n      close: promisify(db.close.bind(db)),\n    };\n  };\n  public async addTool() {\n    this.server.tool(\n      'list-tables',\n      { all: z.boolean() },\n      async ({ all }) => ({\n        content: [{ type: 'text', text: String(all) }],\n      }),\n    );\n    this.server.tool(\n      'query',\n      { sql: z.string() },\n      async ({ sql }) => {\n        const db = this.getDb();\n        try {\n          const results = await db.all(sql);\n          return {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify(results, null, 2),\n              },\n            ],\n          };\n        } catch (err: unknown) {\n          const error = err as Error;\n          return {\n            content: [\n              {\n                type: 'text',\n                text: `Error: ${error.message}`,\n              },\n            ],\n            isError: true,\n          };\n        } finally {\n          await db.close();\n        }\n      },\n    );\n  }\n\n  public async addResource() {\n    this.server.resource(\n      'tables',\n      new ResourceTemplate('tables://{name}', {\n        list: undefined,\n      }),\n      async (uri, { name }) => ({\n        contents: [\n          {\n            uri: uri.href,\n            text: `Tables: ${name}`,\n          },\n        ],\n      }),\n    );\n    this.server.resource(\n      'schema',\n      'schema://main',\n      async (uri) => {\n        const db = this.getDb();\n        try {\n          const tables = await db.all(\n            \"SELECT sql FROM sqlite_master WHERE type='table'\",\n          );\n          return {\n            contents: [\n              {\n                uri: uri.href,\n                text: tables\n                  .map((t: { sql: string }) => t.sql)\n                  .join('\\n'),\n              },\n            ],\n          };\n        } finally {\n          await db.close();\n        }\n      },\n    );\n  }\n\n  public async start() {\n    const transport = new StdioServerTransport();\n    await this.addTool();\n    await this.addResource();\n    await this.server.connect(transport);\n  }\n}\n"],"names":["SeederMCPServer","addTool","server","tool","all","z","boolean","content","type","text","String","sql","string","db","getDb","results","JSON","stringify","err","error","message","isError","close","addResource","resource","ResourceTemplate","list","undefined","uri","name","contents","href","tables","map","t","join","start","transport","StdioServerTransport","connect","constructor","sqlite3","Database","promisify","bind","McpServer","version"],"mappings":";;;;;;;eAQqBA;;;qBALd;uBAC8B;qBACnB;gEACE;sBACM;;;;;;;;;;;;;;;;;;;AACX,MAAMA;IAgBnB,MAAaC,UAAU;QACrB,IAAI,CAACC,MAAM,CAACC,IAAI,CACd,eACA;YAAEC,KAAKC,MAAC,CAACC,OAAO;QAAG,GACnB,OAAO,EAAEF,GAAG,EAAE,GAAM,CAAA;gBAClBG,SAAS;oBAAC;wBAAEC,MAAM;wBAAQC,MAAMC,OAAON;oBAAK;iBAAE;YAChD,CAAA;QAEF,IAAI,CAACF,MAAM,CAACC,IAAI,CACd,SACA;YAAEQ,KAAKN,MAAC,CAACO,MAAM;QAAG,GAClB,OAAO,EAAED,GAAG,EAAE;YACZ,MAAME,KAAK,IAAI,CAACC,KAAK;YACrB,IAAI;gBACF,MAAMC,UAAU,MAAMF,GAAGT,GAAG,CAACO;gBAC7B,OAAO;oBACLJ,SAAS;wBACP;4BACEC,MAAM;4BACNC,MAAMO,KAAKC,SAAS,CAACF,SAAS,MAAM;wBACtC;qBACD;gBACH;YACF,EAAE,OAAOG,KAAc;gBACrB,MAAMC,QAAQD;gBACd,OAAO;oBACLX,SAAS;wBACP;4BACEC,MAAM;4BACNC,MAAM,CAAC,OAAO,EAAEU,MAAMC,OAAO,EAAE;wBACjC;qBACD;oBACDC,SAAS;gBACX;YACF,SAAU;gBACR,MAAMR,GAAGS,KAAK;YAChB;QACF;IAEJ;IAEA,MAAaC,cAAc;QACzB,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAClB,UACA,IAAIC,qBAAgB,CAAC,mBAAmB;YACtCC,MAAMC;QACR,IACA,OAAOC,KAAK,EAAEC,IAAI,EAAE,GAAM,CAAA;gBACxBC,UAAU;oBACR;wBACEF,KAAKA,IAAIG,IAAI;wBACbtB,MAAM,CAAC,QAAQ,EAAEoB,MAAM;oBACzB;iBACD;YACH,CAAA;QAEF,IAAI,CAAC3B,MAAM,CAACsB,QAAQ,CAClB,UACA,iBACA,OAAOI;YACL,MAAMf,KAAK,IAAI,CAACC,KAAK;YACrB,IAAI;gBACF,MAAMkB,SAAS,MAAMnB,GAAGT,GAAG,CACzB;gBAEF,OAAO;oBACL0B,UAAU;wBACR;4BACEF,KAAKA,IAAIG,IAAI;4BACbtB,MAAMuB,OACHC,GAAG,CAAC,CAACC,IAAuBA,EAAEvB,GAAG,EACjCwB,IAAI,CAAC;wBACV;qBACD;gBACH;YACF,SAAU;gBACR,MAAMtB,GAAGS,KAAK;YAChB;QACF;IAEJ;IAEA,MAAac,QAAQ;QACnB,MAAMC,YAAY,IAAIC,2BAAoB;QAC1C,MAAM,IAAI,CAACrC,OAAO;QAClB,MAAM,IAAI,CAACsB,WAAW;QACtB,MAAM,IAAI,CAACrB,MAAM,CAACqC,OAAO,CAACF;IAC5B;IApGAG,aAAc;QAFd,uBAAQtC,UAAR,KAAA;QAQAY,uBAAAA,SAAQ;YACN,MAAMD,KAAK,IAAI4B,gBAAO,CAACC,QAAQ,CAAC;YAChC,OAAO;gBACLtC,KAAKuC,IAAAA,eAAS,EAAgB9B,GAAGT,GAAG,CAACwC,IAAI,CAAC/B;gBAC1CS,OAAOqB,IAAAA,eAAS,EAAC9B,GAAGS,KAAK,CAACsB,IAAI,CAAC/B;YACjC;QACF;QAXE,IAAI,CAACX,MAAM,GAAG,IAAI2C,cAAS,CAAC;YAC1BhB,MAAM;YACNiB,SAAS;QACX;IACF;AAgGF"}