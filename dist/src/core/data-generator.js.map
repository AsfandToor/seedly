{"version":3,"sources":["../../../src/core/data-generator.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\nimport 'dotenv/config';\nconst googleGenAi = new GoogleGenerativeAI(\n  process.env.GOOGLE_API_KEY!,\n);\nconst model = googleGenAi.getGenerativeModel({\n  model: 'gemini-1.5-flash',\n});\n\nexport async function generateValueWithLLM(\n  column: {\n    name: string;\n    type: string;\n  },\n  count: number,\n) {\n  const columnPromptCache = new Map();\n\n  const key = `${column.name}:${column.type}:${count}`;\n  if (columnPromptCache.has(key))\n    return columnPromptCache.get(key);\n\n  const prompt = `Generate ${count} fake values for a SQL column named \"${column.name}\" of type \"${column.type}\". Return the data as a JSON array, nothing else. Each value should be realistic.`;\n\n  const res = await model.generateContent({\n    contents: [{ role: 'user', parts: [{ text: prompt }] }],\n  });\n\n  const response = res.response.text().trim();\n  try {\n    const clean = response\n      .replace(/^```json\\s*/i, '')\n      .replace(/```$/i, '')\n      .trim();\n    const parsed = JSON.parse(clean);\n    if (!Array.isArray(parsed)) {\n      throw new Error('Not an array');\n    }\n    columnPromptCache.set(key, parsed);\n    return parsed;\n  } catch (err) {\n    console.error(\n      `Failed to parse LLM response: ${response}`,\n    );\n    throw new Error(\n      `Invalid LLM response for column ${column.name}`,\n    );\n  }\n}\n"],"names":["generateValueWithLLM","googleGenAi","GoogleGenerativeAI","process","env","GOOGLE_API_KEY","model","getGenerativeModel","column","count","columnPromptCache","Map","key","name","type","has","get","prompt","res","generateContent","contents","role","parts","text","response","trim","clean","replace","parsed","JSON","parse","Array","isArray","Error","set","err","console","error"],"mappings":";;;;+BASsBA;;;eAAAA;;;8BATa;QAC5B;AACP,MAAMC,cAAc,IAAIC,gCAAkB,CACxCC,QAAQC,GAAG,CAACC,cAAc;AAE5B,MAAMC,QAAQL,YAAYM,kBAAkB,CAAC;IAC3CD,OAAO;AACT;AAEO,eAAeN,qBACpBQ,MAGC,EACDC,KAAa;IAEb,MAAMC,oBAAoB,IAAIC;IAE9B,MAAMC,MAAM,GAAGJ,OAAOK,IAAI,CAAC,CAAC,EAAEL,OAAOM,IAAI,CAAC,CAAC,EAAEL,OAAO;IACpD,IAAIC,kBAAkBK,GAAG,CAACH,MACxB,OAAOF,kBAAkBM,GAAG,CAACJ;IAE/B,MAAMK,SAAS,CAAC,SAAS,EAAER,MAAM,qCAAqC,EAAED,OAAOK,IAAI,CAAC,WAAW,EAAEL,OAAOM,IAAI,CAAC,iFAAiF,CAAC;IAE/L,MAAMI,MAAM,MAAMZ,MAAMa,eAAe,CAAC;QACtCC,UAAU;YAAC;gBAAEC,MAAM;gBAAQC,OAAO;oBAAC;wBAAEC,MAAMN;oBAAO;iBAAE;YAAC;SAAE;IACzD;IAEA,MAAMO,WAAWN,IAAIM,QAAQ,CAACD,IAAI,GAAGE,IAAI;IACzC,IAAI;QACF,MAAMC,QAAQF,SACXG,OAAO,CAAC,gBAAgB,IACxBA,OAAO,CAAC,SAAS,IACjBF,IAAI;QACP,MAAMG,SAASC,KAAKC,KAAK,CAACJ;QAC1B,IAAI,CAACK,MAAMC,OAAO,CAACJ,SAAS;YAC1B,MAAM,IAAIK,MAAM;QAClB;QACAvB,kBAAkBwB,GAAG,CAACtB,KAAKgB;QAC3B,OAAOA;IACT,EAAE,OAAOO,KAAK;QACZC,QAAQC,KAAK,CACX,CAAC,8BAA8B,EAAEb,UAAU;QAE7C,MAAM,IAAIS,MACR,CAAC,gCAAgC,EAAEzB,OAAOK,IAAI,EAAE;IAEpD;AACF"}