{"version":3,"sources":["../../../src/core/data-generator.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { Column } from './db/dialects/types';\nimport 'dotenv/config';\nimport logger from '../logger';\nconst apiKey = process.env.GOOGLE_API_KEY;\nif (!apiKey) {\n  throw new Error(\n    'GOOGLE_API_KEY environment variable not found.',\n  );\n}\nconst googleGenAi = new GoogleGenerativeAI(apiKey);\n\nconst model = googleGenAi.getGenerativeModel({\n  model: 'gemini-1.5-flash',\n});\n\nexport async function generateValueWithLLM(\n  column: Column,\n  count: number,\n) {\n  let prompt = `Generate ${count} fake values for a SQL column named \"${column.name}\" of type \"${column.type}\". Return the data as a JSON array, nothing else. Each value should be realistic.`;\n  //handling enums\n  if (column.enumValues && column.enumValues.length > 0) {\n    logger.warn('enum encountered');\n    logger.info(column.enumValues);\n    const allowedValues = column.enumValues\n      .map((val) => `'${val}'`)\n      .join(', ');\n    prompt = `Generate ${count} fake values for a SQL column named \"${column.name}\". This column is an ENUM type, and the ONLY allowed values are: [${allowedValues}]. Return the data as a JSON array, nothing else.`;\n  }\n  logger.warn('just after the enum if condition');\n  const res = await model.generateContent({\n    contents: [{ role: 'user', parts: [{ text: prompt }] }],\n  });\n\n  const response = res.response.text().trim();\n  try {\n    //tthe llm when asked to return response in json always returns the data in the form of json block. the word json is written and is enclosed by ```{}```. We have to get rid of them here.\n    const clean = response\n      .replace(/^```json\\s*/i, '')\n      .replace(/```$/i, '')\n      .trim();\n    const parsed = JSON.parse(clean);\n    if (!Array.isArray(parsed)) {\n      throw new Error('Not an array');\n    }\n\n    return parsed;\n  } catch (err) {\n    console.error(\n      `Failed to parse LLM response: ${response}`,\n    );\n    throw new Error(\n      `Invalid LLM response for column ${column.name}`,\n    );\n  }\n}\n"],"names":["generateValueWithLLM","apiKey","process","env","GOOGLE_API_KEY","Error","googleGenAi","GoogleGenerativeAI","model","getGenerativeModel","column","count","prompt","name","type","enumValues","length","logger","warn","info","allowedValues","map","val","join","res","generateContent","contents","role","parts","text","response","trim","clean","replace","parsed","JSON","parse","Array","isArray","err","console","error"],"mappings":";;;;+BAgBsBA;;;eAAAA;;;8BAhBa;QAE5B;+DACY;;;;;;AACnB,MAAMC,SAASC,QAAQC,GAAG,CAACC,cAAc;AACzC,IAAI,CAACH,QAAQ;IACX,MAAM,IAAII,MACR;AAEJ;AACA,MAAMC,cAAc,IAAIC,gCAAkB,CAACN;AAE3C,MAAMO,QAAQF,YAAYG,kBAAkB,CAAC;IAC3CD,OAAO;AACT;AAEO,eAAeR,qBACpBU,MAAc,EACdC,KAAa;IAEb,IAAIC,SAAS,CAAC,SAAS,EAAED,MAAM,qCAAqC,EAAED,OAAOG,IAAI,CAAC,WAAW,EAAEH,OAAOI,IAAI,CAAC,iFAAiF,CAAC;IAE7L,IAAIJ,OAAOK,UAAU,IAAIL,OAAOK,UAAU,CAACC,MAAM,GAAG,GAAG;QACrDC,eAAM,CAACC,IAAI,CAAC;QACZD,eAAM,CAACE,IAAI,CAACT,OAAOK,UAAU;QAC7B,MAAMK,gBAAgBV,OAAOK,UAAU,CACpCM,GAAG,CAAC,CAACC,MAAQ,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,EACvBC,IAAI,CAAC;QACRX,SAAS,CAAC,SAAS,EAAED,MAAM,qCAAqC,EAAED,OAAOG,IAAI,CAAC,kEAAkE,EAAEO,cAAc,iDAAiD,CAAC;IACpN;IACAH,eAAM,CAACC,IAAI,CAAC;IACZ,MAAMM,MAAM,MAAMhB,MAAMiB,eAAe,CAAC;QACtCC,UAAU;YAAC;gBAAEC,MAAM;gBAAQC,OAAO;oBAAC;wBAAEC,MAAMjB;oBAAO;iBAAE;YAAC;SAAE;IACzD;IAEA,MAAMkB,WAAWN,IAAIM,QAAQ,CAACD,IAAI,GAAGE,IAAI;IACzC,IAAI;QAEF,MAAMC,QAAQF,SACXG,OAAO,CAAC,gBAAgB,IACxBA,OAAO,CAAC,SAAS,IACjBF,IAAI;QACP,MAAMG,SAASC,KAAKC,KAAK,CAACJ;QAC1B,IAAI,CAACK,MAAMC,OAAO,CAACJ,SAAS;YAC1B,MAAM,IAAI7B,MAAM;QAClB;QAEA,OAAO6B;IACT,EAAE,OAAOK,KAAK;QACZC,QAAQC,KAAK,CACX,CAAC,8BAA8B,EAAEX,UAAU;QAE7C,MAAM,IAAIzB,MACR,CAAC,gCAAgC,EAAEK,OAAOG,IAAI,EAAE;IAEpD;AACF"}