{"version":3,"sources":["../../../src/cli/index.ts"],"sourcesContent":["import { Command } from 'commander';\nimport geminiWithFunctionCalling from '../mcp/client';\n\n//to run mysql or postgres use following command in terminal\n/**\n * \n node dist/src/cli/index.js start \\\n  --dialect postgres \\\n  --host localhost \\\n  --port 5432 \\\n  --user postgres \\\n  --password \"\" \\\n  --database gen_backend_v2_development \\\n  \"seed the users table with 5 records\"\n\n  \n  To run sqlite use the following\n  node dist/src/cli/index.js start \"seed the users table with 5 records\" --dialect sqlite --file database.db\n */\n\nconst program = new Command();\n\nprogram\n  .name('seedly')\n  .description(\n    'An AI based Seeding Agent, that will use MCP protocols to understand your DB schema and seed fake data according to it.',\n  )\n  .version('1.0.0')\n  .option('-h, --help', 'Show help');\n\nfunction attachDbOptions(cmd: Command) {\n  return cmd\n    .option(\n      '--dialect <dialect>',\n      'Database dialect (sqlite, postgres, mysql)',\n      'sqlite',\n    )\n    .option('--file <path>', 'SQLite file path')\n    .option('--host <host>', 'DB host')\n    .option('--port <port>', 'DB port')\n    .option('--user <user>', 'DB user')\n    .option('--password <password>', 'DB password')\n    .option('--database <name>', 'Database name')\n    .argument('<prompt>', 'Your natural language query');\n}\n\nfunction extractDbConfig(options: any) {\n  return {\n    type: options.dialect,\n    file: options.file,\n    host: options.host,\n    port: options.port,\n    user: options.user,\n    password: options.password,\n    database: options.database,\n  };\n}\n\nattachDbOptions(program.command('start'))\n  .description(\n    'Start the MCP server to listen for seeding and query tasks',\n  )\n  .action(async (prompt, options) => {\n    const dbConfig = extractDbConfig(options);\n\n    await geminiWithFunctionCalling(prompt, dbConfig);\n  });\nprogram.parse(process.argv);\n// Start MCP Server\n// program.option('-s, --start', 'Start the MCP server');\n\n// program.parse(process.argv);\n\n// const options = program.opts();\n\n// if (options.start) {\n//   console.log('Starting MCP server...');\n//   const server = new SeederMCPServer();\n//   server.start();\n// }\n"],"names":["program","Command","name","description","version","option","attachDbOptions","cmd","argument","extractDbConfig","options","type","dialect","file","host","port","user","password","database","command","action","prompt","dbConfig","geminiWithFunctionCalling","parse","process","argv"],"mappings":";;;;2BAAwB;+DACc;;;;;;AAmBtC,MAAMA,UAAU,IAAIC,kBAAO;AAE3BD,QACGE,IAAI,CAAC,UACLC,WAAW,CACV,2HAEDC,OAAO,CAAC,SACRC,MAAM,CAAC,cAAc;AAExB,SAASC,gBAAgBC,GAAY;IACnC,OAAOA,IACJF,MAAM,CACL,uBACA,8CACA,UAEDA,MAAM,CAAC,iBAAiB,oBACxBA,MAAM,CAAC,iBAAiB,WACxBA,MAAM,CAAC,iBAAiB,WACxBA,MAAM,CAAC,iBAAiB,WACxBA,MAAM,CAAC,yBAAyB,eAChCA,MAAM,CAAC,qBAAqB,iBAC5BG,QAAQ,CAAC,YAAY;AAC1B;AAEA,SAASC,gBAAgBC,OAAY;IACnC,OAAO;QACLC,MAAMD,QAAQE,OAAO;QACrBC,MAAMH,QAAQG,IAAI;QAClBC,MAAMJ,QAAQI,IAAI;QAClBC,MAAML,QAAQK,IAAI;QAClBC,MAAMN,QAAQM,IAAI;QAClBC,UAAUP,QAAQO,QAAQ;QAC1BC,UAAUR,QAAQQ,QAAQ;IAC5B;AACF;AAEAZ,gBAAgBN,QAAQmB,OAAO,CAAC,UAC7BhB,WAAW,CACV,8DAEDiB,MAAM,CAAC,OAAOC,QAAQX;IACrB,MAAMY,WAAWb,gBAAgBC;IAEjC,MAAMa,IAAAA,eAAyB,EAACF,QAAQC;AAC1C;AACFtB,QAAQwB,KAAK,CAACC,QAAQC,IAAI"}